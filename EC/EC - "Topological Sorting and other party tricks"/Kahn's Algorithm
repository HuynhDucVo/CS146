public class TopologicalSortKahn {
    static void topologicalSort(int vertices, ArrayList<ArrayList<Integer>> adj) {
        int[] inDegree = new int[vertices];
        for (int i = 0; i < vertices; i++) {
            for (int node : adj.get(i)) {
                inDegree[node]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < vertices; i++) {
            if (inDegree[i] == 0) {
                q.add(i);
            }
        }
        while (!q.isEmpty()) {
            int curr = q.poll();
            System.out.print(curr + " ");
            for (int node : adj.get(curr)) {
                inDegree[node]--;
                if (inDegree[node] == 0) {
                    q.add(node);
                }
            }
        }
    }
}

/* 
Approach explanation: 

1) Initialization: An array inDegree is used to track the number of incoming edges for each node within the graph.
A queue q is employed to keep track of nodes with no incoming edges (in-degree of 0).

2) Building the inDegree Array: The program iterates through each node and its adjacent nodes to calculate the in-degree for every node.

3) Processing Nodes with No Incoming Edges: Nodes with an in-degree of 0 are enqueued.
The program enters a loop where it dequeues a node, prints it (or processes it as needed), and then decrements the in-degree of its adjacent nodes.
If decrementing the in-degree of an adjacent node results in it having no incoming edges, that node is enqueued.

*/
