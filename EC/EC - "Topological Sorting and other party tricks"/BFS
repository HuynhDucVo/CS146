// The BFS approach is similar to Kahn's Algorithm but framed explicitly in BFS terms.

public class TopologicalSortBFS {
    static List<Integer> topologicalSort(int vertices, List<List<Integer>> adj) {
        int[] inDegree = new int[vertices];

        for (int i = 0; i < vertices; i++) {
            for (int node : adj.get(i)) {
                inDegree[node]++;
            }
        }

        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < vertices; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }

        List<Integer> topOrder = new ArrayList<>();

        while (!queue.isEmpty()) {
            int curr = queue.poll();
            topOrder.add(curr);

            for (int neighbor : adj.get(curr)) {
                inDegree[neighbor]--;

                if (inDegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }

        if (topOrder.size() != vertices) {
            throw new IllegalArgumentException("The graph has at least one cycle, so a topological sort is not possible.");
        }

        return topOrder;
    }

/* 
Approach explanation: 

1) In-Degree Calculation: The algorithm starts by calculating the in-degree (number of incoming edges) of each vertex in the graph.
This is done by iterating through each vertex's adjacency list and incrementing the in-degree of the vertices that are pointed to.

2) Queue Initialization: A queue is initialized to keep track of all vertices with an in-degree of 0. 
These are vertices with no dependencies (i.e., no incoming edges) and can be processed immediately.

3) Processing the Queue: While the queue is not empty, vertices are dequeued and added to the topological order list, topOrder.
For each dequeued vertex, the algorithm decrements the in-degree of its adjacent vertices (neighbors). 
If decrementing results in a neighbor having an in-degree of 0, that neighbor is added to the queue.

4) Cycle Detection: After processing, if the size of topOrder is not equal to the number of vertices, it indicates that the graph contains a cycle.
In such a case, a topological sort is not possible, and the algorithm throws an exception.

*/
