//In java
public class Lab2 {
    public static boolean isAnagram(String s, String t) {
        StringBuilder s1 = new StringBuilder(s);
        StringBuilder t1 = new StringBuilder(t);

        if (s.length() != t.length()) return false;

        for (int i = 0; i < s1.length(); i++) {
            char currentChar = s1.charAt(i);
            boolean found = false;
            for (int j = 0; j < t1.length(); j++) {
                if (t1.charAt(j) == currentChar) {
                    t1.deleteCharAt(j);
                    found = true;
                    break;
                }
            }
            if (!found) return false;
        }

        return true;
    }

    public static void main(String[] args) {
        String s = "fried";
        String t = "ferid";
        System.out.println(isAnagram(s, t));
    }
}

//In python: 
def is_anagram(s, t):
    s1 = list(s)
    t1 = list(t)

    if len(s) != len(t):
        return False

    for char in s1:
        found = False
        for j in range(len(t1)):
            if t1[j] == char:
                del t1[j]
                found = True
                break
        if not found:
            return False

    return True

def main():
    s = "fried"
    t = "ferid"
    print(is_anagram(s, t))

if __name__ == "__main__":
    main()

***************************************************************
The following high-level approach was used:

1. **StringBuilder Initialization**: 
   - Two StringBuilder objects s1 and t1 are initialized with the input strings s and t, respectively.

2. **Length Comparison**:
   - The lengths of the input strings s and t are compared. If they are not equal,
it's immediately determined that t cannot be an anagram of s, and false is returned.

3. **Character Matching**:
   - The code iterates over each character in s1.
   - For each character, it searches for a matching character in t1. If found, it removes the character from t1.
   - If a matching character is not found in t1, it means t cannot be an anagram of s, and false is returned.

4. **Final Check**:
   - After iterating over all characters in s1, if t1 is empty, it indicates that all characters in s
were successfully matched and removed from t, confirming that t is an anagram of s.
In this case, true is returned; otherwise, false is returned.


Logical method is the same on python version
