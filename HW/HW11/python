def floodFill(self, image, sr, sc, newColor):
        if image[sr][sc] == newColor:
            return image  
        
        def dfs(x, y, target_color):
            if x < 0 or x >= len(image) or y < 0 or y >= len(image[0]) or image[x][y] != target_color:
                return
            image[x][y] = newColor
            dfs(x+1, y, target_color)
            dfs(x-1, y, target_color)
            dfs(x, y+1, target_color)
            dfs(x, y-1, target_color)
        
        dfs(sr, sc, image[sr][sc])
        return image
/* 
1. Starting Point: We begin at the starting pixel provided by the input.
2. Depth-First Search (DFS):
    - We define a recursive function `dfs` to perform the DFS.
    - The `dfs` function explores adjacent pixels in four directions (up, down, left, right).
    - For each adjacent pixel:
        - If it has the same color as the starting pixel, we change its color to the target color and recursively call `dfs` on it.
        - If it has a different color or is out of bounds, we skip it.
3. Main Function:
    - In the main function (`floodFill`), we check if the starting pixel already has the target color. If so, there's no need to fill, and we return the image.
    - Otherwise, we call the `dfs` function to start the flood fill process.
4. Return Modified Image: Finally, we return the modified image after the flood fill process is complete.
*/
