class RBNode {
    int data;
    RBNode left, right, parent;
    boolean color; // RED = true, BLACK = false

    public RBNode(int data) {
        this.data = data;
        left = right = parent = null;
        this.color = RED; // New nodes are always red
    }
}

public class RedBlackTree {
    private RBNode root;
    private static final boolean RED = true;
    private static final boolean BLACK = false;

    public RedBlackTree() {
        root = null;
    }

    //Insert
    public void insert(int data) {
        RBNode node = new RBNode(data);
        root = bstInsert(root, node);
        fixInsertion(node);
    }

    private RBNode bstInsert(RBNode root, RBNode node) {
        if (root == null) return node;
    
        if (node.data < root.data) {
            root.left = bstInsert(root.left, node);
            root.left.parent = root;
        } else if (node.data > root.data) {
            root.right = bstInsert(root.right, node);
            root.right.parent = root;
        }
        return root;
    }
    private void fixInsertion(RBNode node) {
        RBNode parent = null;
        RBNode grandParent = null;
        while (node != root && node.color != BLACK && node.parent.color == RED) {
            parent = node.parent;
            grandParent = node.parent.parent;
  
            if (parent == grandParent.left) {
                RBNode uncle = grandParent.right;

                if (uncle != null && uncle.color == RED) {
                    grandParent.color = RED;
                    parent.color = BLACK;
                    uncle.color = BLACK;
                    node = grandParent;
                } else {
                    if (node == parent.right) {
                        rotateLeft(parent);
                        node = parent;
                        parent = node.parent;
                    }

                    rotateRight(grandParent);
                    boolean temp = parent.color;
                    parent.color = grandParent.color;
                    grandParent.color = temp;
                    node = parent;
                }
            } else {
                // Symmetric to above
                // Implement the mirror case of above
            }
        }
    
        root.color = BLACK;
    }

    //inOrderTraversal
    public void inOrderTraversal() {
        inOrderHelper(this.root);
    }
    
    private void inOrderHelper(RBNode node) {
        if (node != null) {
            inOrderHelper(node.left);
            System.out.print(node.data + " ");
            inOrderHelper(node.right);
        }
    }

    //Delete
    public void delete(int data) {
        // Deletion in Red-Black Trees can be complex due to balancing.
        // Here we focus on a simplified version for educational purposes.
        // Full implementation requires handling multiple cases.
    }
}

/*
Red-Black Trees maintain balance through five essential properties:
- Node Color: Each node is either red or black.
- Root Property: The root is always black.
- Red Property: Red nodes cannot have red children.
- Black Depth Property: All paths from a node to its descendant leaves contain the same number of black nodes.
- Leaf Nodes: All leaves (NIL nodes) are black.

Core Functionalities:
1) Insertion:
The new nodes are intially added into the Red-Black Tree by following the standard BST insertion method. 
Red will always be the color of the new node added. Besides, this might make the violation of the property in Red-Black Tree, specifically the red rule if the parent is red too. 
fixInsertion takes care of property recovery as it considers uncle node color and applies the operations in strict order - rotations and recoloring.

2) Traversal:
The postorder traversal entity has the nodes that are written in the ascending order. 
At this point the tree integrity is not breached but moreover, it proves the adequacy of the tree structure and its content.

3) Deletion:
The operation of eradication is considered complex, as it is based on multiple scenarios stemming from the white node and its children. 
We proposed some simple suggestions which is to comprehend the basic change steps once the element is removed (proceeding in a binary tree way) 
and also mentioning the other steps that work together to maintain the Red-Black Tree properties after deletion.

*/
