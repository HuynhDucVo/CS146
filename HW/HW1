// In java
import java.util.Scanner;

public class HW1 {
    public static String toWords(String str) {
        str = str.toLowerCase();
        String test = "";
        for (int i = 0; i < str.length(); i++) {
            if (!Character.isDigit(str.charAt(i))) test += str.charAt(i);
        }
        return test;
    }

    public static boolean isPalindrome(String str) {
        str = toWords(str);
        String reverse = "";
        for (int i = str.length() - 1; i >= 0; i--) {
            reverse += str.charAt(i);
        }
        if (str.equals(reverse)) return true;
        return false;
    }

    public static void main(String[] ags) {
        Scanner input = new Scanner(System.in);
        System.out.println("Enter your String: ");
        String str = input.next();
        System.out.println(isPalindrome(str));
    }
}

// In python
def to_words(s):
    s = s.lower()
    result = ""
    for char in s:
        if not char.isdigit():
            result += char
    return result

def is_palindrome(s):
    s = to_words(s)
    reverse = s[::-1]
    return s == reverse

if __name__ == "__main__":
    user_input = input("Enter your String: ")
    print(is_palindrome(user_input))
*********************************

# High-Level Approach for Palindrome Check

## 1. String Normalization
- The input string is converted to lowercase to ensure 
a case-insensitive comparison.

## 2. Removing Non-Alphabetic Characters
- A loop iterates through each character in the string.
- Non-alphabetic characters, such as digits, are excluded
from further consideration.

## 3. Palindrome Check
- The cleaned string is reversed.
- The program checks if the cleaned string is equal to its reverse,
indicating a palindrome.

## 4. User Interaction
- The user is prompted to input a string.

