def levelOrder(root: Optional[TreeNode]) -> List[List[int]]:
    if not root:
        return []

    result = []
    current_level = [root]

    while current_level:
        next_level = []
        current_values = []

        for node in current_level:
            current_values.append(node.val)

            if node.left:
                next_level.append(node.left)
            if node.right:
                next_level.append(node.right)

        result.append(current_values)
        current_level = next_level

    return result

/*
## Approach:
1. Iterative Depth-First Traversal:
    - We can use an iterative approach based on Depth-First Traversal to traverse the binary tree level by level.
    - We maintain a list `current_level` to keep track of the nodes at the current level.
    - We start with the root node and add it to the `current_level` list.
    - While there are nodes in the `current_level` list:
        - Initialize an empty list `next_level` to store the nodes at the next level.
        - Iterate through the nodes in the `current_level` list:
            - Append the value of the current node to the result list.
            - If the current node has left and/or right children, add them to the `next_level` list.
        - Update the `current_level` list with the nodes from the `next_level` list.
    - Repeat this process until all levels of the tree have been traversed.

2. Result:
    - After completing the traversal, the result list contains the level order traversal of the binary tree.
*/
