public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        // Initialize adjacency matrix
        int[][] distance = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(distance[i], Integer.MAX_VALUE);
            distance[i][i] = 0; // Distance to itself is 0
        }
        
        // Fill adjacency matrix with edge weights
        for (int[] edge : edges) {
            int from = edge[0];
            int to = edge[1];
            int weight = edge[2];
            distance[from][to] = weight;
            distance[to][from] = weight; 
        }
        
        // Floyd-Warshall Algorithm to find all pair shortest paths
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (distance[i][k] != Integer.MAX_VALUE && distance[k][j] != Integer.MAX_VALUE) {
                        distance[i][j] = Math.min(distance[i][j], distance[i][k] + distance[k][j]);
                    }
                }
            }
        }
        
        // Find the city with the smallest number of reachable cities within distanceThreshold
        int minCities = n;
        int result = -1;
        for (int i = 0; i < n; i++) {
            int reachableCities = 0;
            for (int j = 0; j < n; j++) {
                if (distance[i][j] <= distanceThreshold) {
                    reachableCities++;
                }
            }
            if (reachableCities <= minCities) {
                minCities = reachableCities;
                result = i;
            }
        }
        
        return result;
}

/*
1. Building Adjacency Matrix:
Initialize an adjacency matrix to represent the graph.
Fill the matrix with edge weights between cities.

2. Floyd-Warshall Algorithm:
Use Floyd-Warshall algorithm to compute shortest distances between all pairs of cities.
Update the matrix with shortest distances.

3. Finding Reachable Cities:
Iterate through each city.
Count the number of cities that are reachable from the current city within the given distance threshold.

4. Selecting the City:
Keep track of the city with the smallest number of reachable cities.
If there are multiple cities with the same number of reachable cities, select the one with the greatest number.

5. Returning the Result:
Return the selected city as the result.
*/
